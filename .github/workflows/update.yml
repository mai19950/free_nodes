name: Update Project

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '*/5 * * * *'  # 每 5 分钟触发

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: 检查标记是否已加载
        run: |
          echo "Token loaded successfully"
          if [[ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]]; then
            echo "Token is not loaded"
          else
            echo "Token is loaded"
          fi

      - name: 检查仓库
        uses: actions/checkout@v2
        with:
          submodules: true  # 确保子模块被检查出来

      - name: 配置Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' # 根据需要调整Python版本

      - name: 安装python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 获取子模块更新并检查更新
        id: check_updates
        run: |
          updated_submodules=()
          modules_dir="submodules"
          for sub_dir in "$modules_dir"/*/; do
            [ -d "$sub_dir" ] || continue
            sub_name=$(basename "$sub_dir")
            if [ ! -e "$sub_dir/.git" ]; then
              echo -e "\033[1;[33mWarning: '$sub_name' is not a git repository. Skipping.\033[0m"
              continue
            fi
            echo -e "\033[1;[36mChecking $sub_name...\033[0m"
            pushd "$sub_dir" > /dev/null

            git fetch origin
            local_commit=$(git rev-parse HEAD)  
            # 自动适配 main 或 master
            if git show-ref --verify --quiet refs/remotes/origin/main; then
              remote_branch="origin/main"
            else
              remote_branch="origin/master"
            fi
            remote_commit=$(git rev-parse "$remote_branch")

            if [ "$local_commit" != "$remote_commit" ]; then
              git reset --hard "$remote_branch"
              echo -e "\033[1;32m[Updated]\033[0m \033[32m$sub_name has updates.\033[0m"
              updated_submodules+=("$sub_name")
            else
              echo -e "\033[1;90m[Up-to-date]\033[0m \033[90m$sub_name is up to date.\033[0m"
            fi
            popd > /dev/null
          done

          if [ ${#updated_submodules[@]} -gt 0 ]; then
            echo "update=true" >> $GITHUB_ENV
            echo "updated_submodules=${updated_submodules[*]}" >> $GITHUB_ENV  # 将更新的子项目名存储到环境变量
          else
            echo "update=false" >> $GITHUB_ENV
          fi
          echo "$updated_submodules"

      - name: 为每个更新的子模块运行 Python 脚本
        if: env.update == 'true'
        run: |
          for submodule in ${updated_submodules}; do
            python main.py $submodule  # 将子项目名逐个传递给 Python 脚本
          done
          # python cm_sub.py

      - name: 提交和推送更改
        run: |
          git config --global user.name "mai19950"
          git config --global user.email "underdog-95@outlook.com"
          # 添加更改
          git add .

          # 检查是否有更改
          if ! git diff-index --quiet HEAD --; then
            commit_message="Update node form '${updated_submodules}' at $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
            git commit -m "$commit_message"
            git pull --rebase origin main
            git push origin main
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    permissions:
      contents: write  # 确保 GitHub Actions 有权限进行推送